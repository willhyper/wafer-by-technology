
import tsmc as data
import numpy as np
from scipy.optimize import nnls

quarters = data.quarters()

def _iter_to_array(it):
    return np.array(list(it))

def _revenue_of_tech(tech): 
    return _iter_to_array(data.revenue_of_technology(tech).values())/1000  # M NTD to B NTD

revenue_matrix = np.array(
    [
        _revenue_of_tech('5nm'),
        _revenue_of_tech('7nm'),
        _revenue_of_tech('10nm'),
        _revenue_of_tech('16nm'),
        _revenue_of_tech('20nm'),
        _revenue_of_tech('28nm'),
        _revenue_of_tech('40/45nm'),
        _revenue_of_tech('65nm'),
        _revenue_of_tech('90nm'),
        _revenue_of_tech('0.11/0.13um'),
        _revenue_of_tech('0.15/0.18um'),
        _revenue_of_tech('0.25um+'),
    ])
''' # Revenue (B NTD): technology (5nm, 7nm, ...) by quarters (2021Q1, 2020Q4, 2020Q3, ...)
array([
       [ 50.7374,  72.306 ,  28.5144,   0.    ,   0.    ,   0.    , 0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    , 0.    ],
       [126.8435, 104.8437, 124.7505, 111.852 , 108.71  , 111.034 , 79.1235,  50.61  ,  48.114 ,  66.6471,  28.6385,   0.    , 0.    ],
       [  0.    ,   0.    ,   0.    ,   0.    ,   1.553 ,   3.1724, 5.861 ,   7.23  ,   8.748 ,  17.3862,  15.621 ,  30.3264, 47.1352],
       [ 50.7374,  46.9989,  64.1574,  55.926 ,  59.014 ,  63.448 , 64.471 ,  55.43  ,  34.992 ,  57.954 ,  59.8805,  48.9888, 44.6544],
       [  0.    ,   3.6153,   3.5643,   3.107 ,   3.106 ,   3.1724, 2.9305,   2.41  ,   2.187 ,   2.8977,   5.207 ,   9.3312, 9.9232],
       [ 39.8651,  39.7683,  42.7716,  43.498 ,  43.484 ,  41.2412, 46.888 ,  43.38  ,  43.74  ,  49.2609,  49.4665,  53.6544, 49.616 ],
       [ 25.3687,  28.9224,  28.5144,  27.963 ,  31.06  ,  25.3792, 29.305 ,  26.51  ,  26.244 ,  28.977 ,  31.242 ,  25.6608, 27.2888],
       [ 18.1205,  18.0765,  17.8215,  18.642 ,  18.636 ,  22.2068, 20.5135,  19.28  ,  17.496 ,  23.1816,  20.828 ,  20.9952, 22.3272],
       [ 10.8723,   7.2306,   7.1286,   9.321 ,   9.318 ,   9.5172, 5.861 ,   7.23  ,   6.561 ,   8.6931,  10.414 ,  11.664 , 12.404 ],
       [ 10.8723,  10.8459,   7.1286,   9.321 ,   6.212 ,   9.5172, 5.861 ,   4.82  ,   6.561 ,   5.7954,   7.8105,   4.6656, 4.9616],
       [ 21.7446,  25.3071,  24.9501,  24.856 ,  24.848 ,  25.3792, 26.3745,  19.28  ,  17.496 ,  23.1816,  23.4315,  20.9952, 22.3272],
       [  7.2482,   3.6153,   7.1286,   6.214 ,   6.212 ,   3.1724, 5.861 ,   4.82  ,   6.561 ,   5.7954,   7.8105,   6.9984, 7.4424]
       ])
'''


shipments = _iter_to_array(data.shipments().values())/1000 # kpcs to Mpcs
'''
array([3.359, 3.246, 3.24 , 2.985, 2.925, 2.823, 2.733, 2.308, 2.205, 2.686, 2.712, 2.674, 2.68 ])
# unit Mpcs
'''

#%%
'''
problem statement:
[        ]    [P5               ]   [K5             ]                [P5*K5               ]
[   R    ]    [   P7            ]   [  K7           ]   [       ]    [     P7*K7          ]
[        ]  = [      P10        ] @ [    K10        ] @ [   R   ] =  [          ...       ] @ R
[--------]    [         ...     ]   [       ...     ]   [       ]    [                    ]
[   S    ]    [             P250]   [           K250]                [                    ] 
              [1  1  1  ... 1   ]                                    [K5   K7  ...    K250]

   RS       =                                                     =           PKK           @ R

RS = PKK @ R
Constraint: K non-negative
Goal: solve K, then solve P

strategy:

PKKT , residual = nnls(R.T, RS.T)
PKK = PKKT.T
K = PKK[-1,:]

note:
PK = PKK[:-1,:] appears to be identity matrix
As a result,

P = 1/K

revising strategy:
applying PK as identity matrix,

S = K @ R

KT , residual = nnls(R.T, S.T)
K=KT.T


'''

R = revenue_matrix
S = shipments


# https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.nnls.html
KT , residual = nnls(R.T, S.T)
K=KT.T
'''
array([0.00832589, 0.00595463, 0.        , 0.00381002, 0.02956118, 0.01783495, 0.        , 0.        , 0.04144655, 0.00394519, 0.02079567, 0.04415343])
'''

# invariant: PK is identity matrix
P = 1/K
'''
array([120.10730317, 167.93659045,          inf, 262.46605066,  33.82814458,  56.06967406,          inf,          inf,  24.12745974, 253.47295394,  48.08693922,  22.64829842])
unit: K NTD
'''

# shipment (technology by quarter)
Stq = np.diag(K) @ R
'''
array([[0.42243393, 0.60201169, 0.23740771, 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.75530591, 0.62430528, 0.74284288, 0.6660371 , 0.64732766, 0.66116622, 0.47115104, 0.30136375, 0.28650099, 0.39685872, 0.17053163, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.19331033, 0.17906659, 0.24444076, 0.21307899, 0.22484432, 0.24173793, 0.24563558, 0.21118922, 0.1333201 , 0.2208057 , 0.2281457 , 0.18664814, 0.170134  ],
       [0.        , 0.10687255, 0.10536493, 0.0918466 , 0.09181704, 0.0937799 , 0.08662905, 0.07124245, 0.06465031, 0.08565944, 0.15392508, 0.27584132, 0.29334154],
       [0.71099218, 0.70926576, 0.76282947, 0.77578478, 0.77553509, 0.73553486, 0.83624527, 0.77368026, 0.78010084, 0.87856583, 0.8822327 , 0.9569237 , 0.88489903],
       [0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        , 0.        ],
       [0.45061934, 0.29968343, 0.29545589, 0.38632331, 0.38619897, 0.39445512, 0.24291824, 0.29965857, 0.27193082, 0.36029902, 0.43162439, 0.48343258, 0.51410302],
       [0.04289333, 0.04278918, 0.02812371, 0.03677315, 0.02450755, 0.0375472 , 0.02312278, 0.01901584, 0.02588442, 0.02286398, 0.03081394, 0.0184067 , 0.01957447],
       [0.45219347, 0.52627804, 0.51885398, 0.51689711, 0.51673075, 0.52777741, 0.54847533, 0.40094047, 0.363841  , 0.48207685, 0.48727368, 0.4366092 , 0.46430903],
       [0.32003287, 0.15962789, 0.31475212, 0.2743694 , 0.27428109, 0.14007233, 0.25878324, 0.21281952, 0.28969064, 0.25588677, 0.34486034, 0.30900335, 0.32860747]])

unit Mpcs
# 0.42243393 means 0.42243393 Mpcs for 2021Q1 5nm
'''
# invariant: np.sum(Stq,0) = S
_S_diff = np.abs(np.sum(Stq,0) - S)
print('lstsq error. max difference (M pcs) in shipment of some quarter', np.max(_S_diff), '.improve it to 0 ideally')

# wafer price by technology
wafer_price = { tech : price for price, tech in zip(P, data.technology)}
print('wafer price (K NTD)',wafer_price)

'''
{'5nm': 120.10730317296388,
 '7nm': 167.93659045044112,
 '10nm': inf,
 '16nm': 262.46605066196224,
 '20nm': 33.82814457649252,
 '28nm': 56.06967406236708,
 '40/45nm': inf,
 '65nm': inf,
 '90nm': 24.127459738051822,
 '0.11/0.13um': 253.47295393843143,
 '0.15/0.18um': 48.08693921944406,
 '0.25um+': 22.648298424300272}

# unit K NTD
'''
# todo: fix K=0, P=inf issue