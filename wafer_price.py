
from tsmc import df, technology
import numpy as np
from scipy.optimize import minimize, nnls, LinearConstraint

dft = df[technology]
revenue = df['revenue(MNTD)']
revenue_matrix = dft.apply(lambda x : x.mul(revenue) / 1000).to_numpy().transpose()
''' # Revenue (B NTD): technology (5nm, 7nm, ...) by quarters (2021Q2, 2021Q1, 2020Q4, 2020Q3, ...)
array([[ 66.9861 ,  50.7374 ,  72.306  ,  28.5144 ,   0.     ,   0.     ,
          0.     ,   0.     ,   0.     ,   0.     ,   0.     ,   0.     ,
          0.     ,   0.     ],
       [115.36495, 126.8435 , 104.8437 , 124.7505 , 111.852  , 108.71   ,
        111.034  ,  79.1235 ,  50.61   ,  48.114  ,  66.6471 ,  28.6385 ,
          0.     ,   0.     ],
       [  0.     ,   0.     ,   0.     ,   0.     ,   0.     ,   1.553  ,
          3.1724 ,   5.861  ,   7.23   ,   8.748  ,  17.3862 ,  15.621  ,
         30.3264 ,  47.1352 ],
       [ 52.1003 ,  50.7374 ,  46.9989 ,  64.1574 ,  55.926  ,  59.014  ,
         63.448  ,  64.471  ,  55.43   ,  34.992  ,  57.954  ,  59.8805 ,
         48.9888 ,  44.6544 ],
       [  0.     ,   0.     ,   3.6153 ,   3.5643 ,   3.107  ,   3.106  ,
          3.1724 ,   2.9305 ,   2.41   ,   2.187  ,   2.8977 ,   5.207  ,
          9.3312 ,   9.9232 ],
       [ 40.93595,  39.8651 ,  39.7683 ,  42.7716 ,  43.498  ,  43.484  ,
         41.2412 ,  46.888  ,  43.38   ,  43.74   ,  49.2609 ,  49.4665 ,
         53.6544 ,  49.616  ],
       [ 26.05015,  25.3687 ,  28.9224 ,  28.5144 ,  27.963  ,  31.06   ,
         25.3792 ,  29.305  ,  26.51   ,  26.244  ,  28.977  ,  31.242  ,
         25.6608 ,  27.2888 ],
       [ 18.60725,  18.1205 ,  18.0765 ,  17.8215 ,  18.642  ,  18.636  ,
         22.2068 ,  20.5135 ,  19.28   ,  17.496  ,  23.1816 ,  20.828  ,
         20.9952 ,  22.3272 ],
       [ 11.16435,  10.8723 ,   7.2306 ,   7.1286 ,   9.321  ,   9.318  ,
          9.5172 ,   5.861  ,   7.23   ,   6.561  ,   8.6931 ,  10.414  ,
         11.664  ,  12.404  ],
       [ 11.16435,  10.8723 ,  10.8459 ,   7.1286 ,   9.321  ,   6.212  ,
          9.5172 ,   5.861  ,   4.82   ,   6.561  ,   5.7954 ,   7.8105 ,
          4.6656 ,   4.9616 ],
       [ 22.3287 ,  21.7446 ,  25.3071 ,  24.9501 ,  24.856  ,  24.848  ,
         25.3792 ,  26.3745 ,  19.28   ,  17.496  ,  23.1816 ,  23.4315 ,
         20.9952 ,  22.3272 ],
       [  7.4429 ,   7.2482 ,   3.6153 ,   7.1286 ,   6.214  ,   6.212  ,
          3.1724 ,   5.861  ,   4.82   ,   6.561  ,   5.7954 ,   7.8105 ,
          6.9984 ,   7.4424 ]])

'''


shipments = df['shipment(Kpcs)'] / 1000 # kpcs to Mpcs
'''
array([3.449, 3.359, 3.246, 3.24 , 2.985, 2.925, 2.823, 2.733, 2.308,
       2.205, 2.686, 2.712, 2.674, 2.68 ])
# unit Mpcs
'''

#%%
'''
problem statement:
[        ]    [P5               ]   [K5             ]                [P5*K5               ]
[   R    ]    [   P7            ]   [  K7           ]   [       ]    [     P7*K7          ]
[        ]  = [      P10        ] @ [    K10        ] @ [   R   ] =  [          ...       ] @ R
[--------]    [         ...     ]   [       ...     ]   [       ]    [                    ]
[   S    ]    [             P250]   [           K250]                [                    ] 
              [1  1  1  ... 1   ]                                    [K5   K7  ...    K250]

   RS       =                                                     =           PKK           @ R

RS = PKK @ R
Constraint: K non-negative, K5<K7, K7<K10,...,K150<K250 
Goal: solve K, then solve P

strategy:

K0T , residual = nnls(R.T, S.T)
K0 = K0T.T

res = minimize(loss_func, K0, constraints)
K = res.x

note:
PK = PKK[:-1,:] appears to be identity matrix
As a result,

P = 1/K

revising strategy:
applying PK as identity matrix,

S = K @ R

'''

R = revenue_matrix
S = shipments

#%% initial guess uses nnls
# https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.nnls.html
def initial_guess():
    K0T , residual = nnls(R.T, S.T)
    return K0T.T

K0 = initial_guess()
'''
array([8.18951678e-03, 6.05491634e-03, 3.13138669e-05, 3.77649284e-03,
       3.14977257e-02, 1.81546731e-02, 0.00000000e+00, 0.00000000e+00,
       3.98041270e-02, 4.82383376e-03, 2.01231567e-02, 4.35962340e-02])
'''

# https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.LinearConstraint.html#scipy.optimize.LinearConstraint
# https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html#scipy.optimize.minimize

def loss_func(K)->float:
    delta = K @ R - S
    return delta @ delta.T

nT, nQ = R.shape # 12, 13

def constraints(nT):
    c = np.zeros([nT, nT])
    c[0,0]=1
    for i in range(1, nT):
        c[i, i-1]=  1
        c[i, i]  = -1
    lb = np.zeros(nT)
    lb[1:] = -np.inf
    ub = np.zeros(nT)
    ub[0] = np.inf
    return LinearConstraint(c, lb, ub)

lc = constraints(nT)


res = minimize(loss_func, K0, constraints=lc)
assert res.success
K = res.x
'''
array([0.00575116, 0.00575116, 0.00575116, 0.00575116, 0.00677875,
       0.00677875, 0.00677875, 0.00677875, 0.02353638, 0.02353638,
       0.02353638, 0.06079188])
'''

# invariant: PK is identity matrix
P = 1/K
'''
array([173.87800585, 173.87800585, 173.87800585, 173.87800585,
       147.51992112, 147.51992112, 147.51992112, 147.51992112,
        42.48741014,  42.48741014,  42.48741014,  16.44956462])
unit: K NTD
'''

# shipment (technology by quarter)
Stq = np.diag(K) @ R
'''
array([[0.38524769, 0.29179884, 0.41584328, 0.16399084, 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        ],
       [0.66348213, 0.72949709, 0.60297275, 0.71745992, 0.6432786 ,
        0.62520846, 0.63857415, 0.4550518 , 0.29106614, 0.27671125,
        0.38329805, 0.16470456, 0.        , 0.        ],
       [0.        , 0.        , 0.        , 0.        , 0.        ,
        0.00893155, 0.01824498, 0.03370754, 0.04158088, 0.05031114,
        0.09999079, 0.08983885, 0.17441194, 0.27108201],
       [0.29963709, 0.29179884, 0.27029813, 0.36897939, 0.3216393 ,
        0.33939888, 0.36489951, 0.37078295, 0.31878672, 0.20124454,
        0.33330265, 0.34438226, 0.28174236, 0.25681454],
       [0.        , 0.        , 0.0245072 , 0.02416148, 0.02106156,
        0.02105478, 0.02150489, 0.01986511, 0.01633678, 0.01482512,
        0.01964277, 0.03529693, 0.06325383, 0.06726685],
       [0.27749439, 0.27023537, 0.26957918, 0.28993779, 0.29486187,
        0.29476697, 0.2795636 , 0.31784182, 0.29406198, 0.29650233,
        0.3339271 , 0.33532081, 0.36370952, 0.33633424],
       [0.17658734, 0.17196796, 0.19605759, 0.19329186, 0.18955406,
        0.21054783, 0.17203914, 0.19865114, 0.17970454, 0.1779014 ,
        0.19642771, 0.21178157, 0.17394803, 0.18498383],
       [0.12613381, 0.12283426, 0.12253599, 0.12080741, 0.12636937,
        0.1263287 , 0.15053425, 0.1390558 , 0.13069421, 0.11860093,
        0.15714217, 0.14118771, 0.14232112, 0.15135041],
       [0.26276843, 0.25589463, 0.17018218, 0.16778147, 0.21938264,
        0.21931203, 0.22400047, 0.13794675, 0.17016806, 0.15442222,
        0.20460414, 0.2451079 , 0.27452838, 0.29194531],
       [0.26276843, 0.25589463, 0.25527327, 0.16778147, 0.21938264,
        0.14620802, 0.22400047, 0.13794675, 0.11344537, 0.15442222,
        0.13640276, 0.18383093, 0.10981135, 0.11677812],
       [0.52553686, 0.51178926, 0.59563762, 0.58723513, 0.58502036,
        0.58483207, 0.5973346 , 0.62076036, 0.45378148, 0.41179257,
        0.54561104, 0.55149278, 0.49415109, 0.52550155],
       [0.4524679 , 0.44063172, 0.21978089, 0.43336101, 0.37776076,
        0.37763917, 0.19285617, 0.35630122, 0.29301687, 0.39885554,
        0.35231328, 0.474815  , 0.42544591, 0.45243751]])
unit Mpcs
# 0.29114903 means 0.29114903 Mpcs for 2021Q1 5nm
'''
# invariant: np.sum(Stq,0) = S
_S_diff = np.abs(np.sum(Stq,0) - S)
print('lstsq error. max difference (M pcs) in shipment of some quarter', np.max(_S_diff), '.improve it to 0 ideally')

# wafer price by technology
wafer_price = { tech : price for price, tech in zip(P, technology)}
print('wafer price (K NTD)',wafer_price)

'''
{'5nm': 173.87800585370016, 
 '7nm': 173.87800585363985, 
 '10nm': 173.87800585493213, 
 '16nm': 173.87800585468273, 
 '20nm': 147.5199211186819, 
 '28nm': 147.51992111961093, 
 '40/45nm': 147.5199211204744, 
 '65nm': 147.51992112054825, 
 '90nm': 42.487410137411395, 
 '0.11/0.13um': 42.48741013756986, 
 '0.15/0.18um': 42.487410137371754, 
 '0.25um+': 16.44956461527233}

# unit K NTD
'''
