
import tsmc as data
import numpy as np

quarters = data.quarters()

def _iter_to_array(it):
    return np.array(list(it))

def _revenue_of_tech(tech): 
    return _iter_to_array(data.revenue_of_technology(tech).values())/1000  # M NTD to B NTD

revenue_matrix = np.array(
    [
        _revenue_of_tech('5nm'),
        _revenue_of_tech('7nm'),
        _revenue_of_tech('10nm'),
        _revenue_of_tech('16nm'),
        _revenue_of_tech('20nm'),
        _revenue_of_tech('28nm'),
        _revenue_of_tech('40/45nm'),
        _revenue_of_tech('65nm'),
        _revenue_of_tech('90nm'),
        _revenue_of_tech('0.11/0.13um'),
        _revenue_of_tech('0.15/0.18um'),
        _revenue_of_tech('0.25um+'),
    ])
''' # Revenue (B NTD): technology (5nm, 7nm, ...) by quarters (2021Q1, 2020Q4, 2020Q3, ...)
array([
       [ 50.7374,  72.306 ,  28.5144,   0.    ,   0.    ,   0.    , 0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    , 0.    ],
       [126.8435, 104.8437, 124.7505, 111.852 , 108.71  , 111.034 , 79.1235,  50.61  ,  48.114 ,  66.6471,  28.6385,   0.    , 0.    ],
       [  0.    ,   0.    ,   0.    ,   0.    ,   1.553 ,   3.1724, 5.861 ,   7.23  ,   8.748 ,  17.3862,  15.621 ,  30.3264, 47.1352],
       [ 50.7374,  46.9989,  64.1574,  55.926 ,  59.014 ,  63.448 , 64.471 ,  55.43  ,  34.992 ,  57.954 ,  59.8805,  48.9888, 44.6544],
       [  0.    ,   3.6153,   3.5643,   3.107 ,   3.106 ,   3.1724, 2.9305,   2.41  ,   2.187 ,   2.8977,   5.207 ,   9.3312, 9.9232],
       [ 39.8651,  39.7683,  42.7716,  43.498 ,  43.484 ,  41.2412, 46.888 ,  43.38  ,  43.74  ,  49.2609,  49.4665,  53.6544, 49.616 ],
       [ 25.3687,  28.9224,  28.5144,  27.963 ,  31.06  ,  25.3792, 29.305 ,  26.51  ,  26.244 ,  28.977 ,  31.242 ,  25.6608, 27.2888],
       [ 18.1205,  18.0765,  17.8215,  18.642 ,  18.636 ,  22.2068, 20.5135,  19.28  ,  17.496 ,  23.1816,  20.828 ,  20.9952, 22.3272],
       [ 10.8723,   7.2306,   7.1286,   9.321 ,   9.318 ,   9.5172, 5.861 ,   7.23  ,   6.561 ,   8.6931,  10.414 ,  11.664 , 12.404 ],
       [ 10.8723,  10.8459,   7.1286,   9.321 ,   6.212 ,   9.5172, 5.861 ,   4.82  ,   6.561 ,   5.7954,   7.8105,   4.6656, 4.9616],
       [ 21.7446,  25.3071,  24.9501,  24.856 ,  24.848 ,  25.3792, 26.3745,  19.28  ,  17.496 ,  23.1816,  23.4315,  20.9952, 22.3272],
       [  7.2482,   3.6153,   7.1286,   6.214 ,   6.212 ,   3.1724, 5.861 ,   4.82  ,   6.561 ,   5.7954,   7.8105,   6.9984, 7.4424]
       ])
'''


shipments = _iter_to_array(data.shipments().values())/1000 # kpcs to Mpcs
'''
array([3.359, 3.246, 3.24 , 2.985, 2.925, 2.823, 2.733, 2.308, 2.205, 2.686, 2.712, 2.674, 2.68 ])
# unit Mpcs
'''

#%%
'''
problem statement:
[        ]    [P5               ]   [K5             ]                [P5*K5               ]
[   R    ]    [   P7            ]   [  K7           ]   [       ]    [     P7*K7          ]
[        ]  = [      P10        ] @ [    K10        ] @ [   R   ] =  [          ...       ] @ R
[--------]    [         ...     ]   [       ...     ]   [       ]    [                    ]
[   S    ]    [             P250]   [           K250]                [                    ] 
              [1  1  1  ... 1   ]                                    [K5   K7  ...    K250]

   RS       =                                                     =           PKK           @ R

RS = PKK @ R

Goal: solve K, then solve P

strategy:

PKKT , residual, rank, sv = np.linalg.lstsq(R.T, RS.T)
PKK = PKKT.T
K = PKK[-1,:]

note:
PK = PKK[:-1,:] appears to be identity matrix
As a result,

P = 1/K

S = np.diag(K) @ R

'''

R = revenue_matrix
S = shipments

RS = np.vstack([R,S])

'''
np.set_printoptions(linewidth=200)
RS=
array([[ 50.7374,  72.306 ,  28.5144,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ],
       [126.8435, 104.8437, 124.7505, 111.852 , 108.71  , 111.034 ,  79.1235,  50.61  ,  48.114 ,  66.6471,  28.6385,   0.    ,   0.    ],
       [  0.    ,   0.    ,   0.    ,   0.    ,   1.553 ,   3.1724,   5.861 ,   7.23  ,   8.748 ,  17.3862,  15.621 ,  30.3264,  47.1352],
       [ 50.7374,  46.9989,  64.1574,  55.926 ,  59.014 ,  63.448 ,  64.471 ,  55.43  ,  34.992 ,  57.954 ,  59.8805,  48.9888,  44.6544],
       [  0.    ,   3.6153,   3.5643,   3.107 ,   3.106 ,   3.1724,   2.9305,   2.41  ,   2.187 ,   2.8977,   5.207 ,   9.3312,   9.9232],
       [ 39.8651,  39.7683,  42.7716,  43.498 ,  43.484 ,  41.2412,  46.888 ,  43.38  ,  43.74  ,  49.2609,  49.4665,  53.6544,  49.616 ],
       [ 25.3687,  28.9224,  28.5144,  27.963 ,  31.06  ,  25.3792,  29.305 ,  26.51  ,  26.244 ,  28.977 ,  31.242 ,  25.6608,  27.2888],
       [ 18.1205,  18.0765,  17.8215,  18.642 ,  18.636 ,  22.2068,  20.5135,  19.28  ,  17.496 ,  23.1816,  20.828 ,  20.9952,  22.3272],
       [ 10.8723,   7.2306,   7.1286,   9.321 ,   9.318 ,   9.5172,   5.861 ,   7.23  ,   6.561 ,   8.6931,  10.414 ,  11.664 ,  12.404 ],
       [ 10.8723,  10.8459,   7.1286,   9.321 ,   6.212 ,   9.5172,   5.861 ,   4.82  ,   6.561 ,   5.7954,   7.8105,   4.6656,   4.9616],
       [ 21.7446,  25.3071,  24.9501,  24.856 ,  24.848 ,  25.3792,  26.3745,  19.28  ,  17.496 ,  23.1816,  23.4315,  20.9952,  22.3272],
       [  7.2482,   3.6153,   7.1286,   6.214 ,   6.212 ,   3.1724,   5.861 ,   4.82  ,   6.561 ,   5.7954,   7.8105,   6.9984,   7.4424],
       [  3.359 ,   3.246 ,   3.24  ,   2.985 ,   2.925 ,   2.823 ,   2.733 ,   2.308 ,   2.205 ,   2.686 ,   2.712 ,   2.674 ,   2.68  ]])
'''

# https://numpy.org/doc/stable/reference/generated/numpy.linalg.lstsq.html
PKKT, residuals, rank, sv = np.linalg.lstsq(R.T, RS.T, rcond=None)
PKK = PKKT.T

K = PKK[-1,:] # last row
'''
array([ 0.00746836,  0.00699655,  0.01253799,  0.00989012,  0.0021332 ,  0.03878671, -0.00005967, -0.05946065,  0.04020906,  0.0283622 ,  0.01740558, -0.00074242])
'''

# invariant: PK is identity matrix
P = 1/K
'''
array([ 133.8982906 , 142.92750876, 79.75760634, 101.11100709, 468.77975987, 25.78202606, -16759.01028608, -16.81784594, 24.87001874, 35.25820124, 57.45284495, -1346.94196256])

unit: K NTD

'''

# shipment (technology by quarter)
Stq = np.diag(K) @ R
'''
array([[ 0.37892493,  0.54000689,  0.21295567,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.88746737,  0.73354458,  0.87282358,  0.78257853,  0.76059536,  0.77685535,  0.55359182,  0.35409559,  0.33663219,  0.46630002,  0.20037081,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.0194715 ,  0.03977552,  0.07348515,  0.09064966,  0.10968233,  0.21798799,  0.19585593,  0.38023207,  0.59098062],
       [ 0.50179898,  0.46482476,  0.63452439,  0.55311485,  0.58365555,  0.62750834,  0.63762593,  0.54820936,  0.34607508,  0.57317202,  0.59222533,  0.48450511,  0.44163738],
       [ 0.        ,  0.00771215,  0.00760336,  0.00662785,  0.00662571,  0.00676736,  0.00625134,  0.00514101,  0.0046653 ,  0.00618137,  0.01110756,  0.0199053 ,  0.02116815],
       [ 1.54623612,  1.54248157,  1.6589697 ,  1.68714437,  1.68660135,  1.59961052,  1.81863132,  1.68256753,  1.69653075,  1.9106683 ,  1.91864285,  2.08107772,  1.92444147],
       [-0.00151373, -0.00172578, -0.00170144, -0.00166854, -0.00185333, -0.00151436, -0.00174861, -0.00158184, -0.00156596, -0.00172904, -0.00186419, -0.00153116, -0.00162831],
       [-1.07745665, -1.07484038, -1.05967792, -1.10846538, -1.10810862, -1.32043069, -1.21974598, -1.14640127, -1.04032348, -1.37839293, -1.23844635, -1.24838817, -1.32758976],
       [ 0.43716493,  0.29073561,  0.28663428,  0.37478862,  0.37466799,  0.38267764,  0.23566528,  0.29071148,  0.26381162,  0.34954135,  0.41873712,  0.46899844,  0.49875314],
       [ 0.3083623 ,  0.30761354,  0.20218275,  0.26436403,  0.17618596,  0.26992869,  0.16623083,  0.13670578,  0.18608437,  0.16437027,  0.22152293,  0.13232666,  0.14072187],
       [ 0.37847734,  0.44048471,  0.43427092,  0.43263306,  0.43249381,  0.44173966,  0.45906343,  0.33557955,  0.304528  ,  0.40348916,  0.40783881,  0.3654336 ,  0.38861783],
       [-0.00538123, -0.00268408, -0.00529243, -0.00461341, -0.00461193, -0.00235526, -0.00435134, -0.00357848, -0.00487103, -0.00430264, -0.00579869, -0.00519577, -0.00552541]])

unit Mpcs
# 0.3789 means 0.3789 Mpcs for 2021Q1 5nm
'''
# invariant: np.sum(Stq,0) = S
_S_diff = np.abs(np.sum(Stq,0) - S)
print('lstsq error. max difference (M pcs) in shipment of some quarter', np.max(_S_diff), '.improve it to 0 ideally')

# wafer price by technology
wafer_price = { tech : price for price, tech in zip(P, data.technology)}
print('wafer price (K NTD)',wafer_price)

'''
{'5nm': 133.8982906042925, 
 '7nm': 142.92750876076866, 
 '10nm': 79.75760633996046, 
 '16nm': 101.11100709299961, 
 '20nm': 468.7797598689739, 
 '28nm': 25.78202605553409, 
 '40/45nm': -16759.010286080163, 
 '65nm': -16.81784594391392, 
 '90nm': 24.870018739294334, 
 '0.11/0.13um': 35.25820124032801, 
 '0.15/0.18um': 57.452844950084526, 
 '0.25um+': -1346.9419625566711}

# unit K NTD
'''